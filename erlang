<!DOCTYPE html>
<html lang="es">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Calculadora Erlang - Call Center Inbound</title>
    <link rel="preconnect" href="https://fonts.googleapis.com">
    <link rel="preconnect" href="https://fonts.gstatic.com" crossorigin>
    <link href="https://fonts.googleapis.com/css2?family=Manrope:wght@400;600;700&display=swap" rel="stylesheet">
    <style>
        :root {
            --color-bg: #f4f7fe;
            --color-surface: #ffffff;
            --color-primary-start: #6a11cb;
            --color-primary-end: #2575fc;
            --color-success: #16a34a;
            --color-warning: #f59e0b;
            --color-error: #ef4444;
            --color-text: #1e293b;
            --color-text-secondary: #64748b;
            --color-border: #e2e8f0;
            --shadow-lg: 0 25px 50px -12px rgba(0, 0, 0, 0.15);
            --font-family: 'Manrope', sans-serif;
        }
        
        // Funciones para Intervalos Horarios
        function generateIntervals() {
            const startHour = parseInt(document.getElementById('startHour').value);
            const endHour = parseInt(document.getElementById('endHour').value);
            const intervalSize = parseInt(document.getElementById('intervalSize').value);
            
            if (endHour <= startHour) {
                alert('La hora de fin debe ser mayor que la hora de inicio');
                return;
            }
            
            // Generar intervalos
            const intervals = [];
            const totalMinutes = (endHour - startHour) * 60;
            const numberOfIntervals = totalMinutes / intervalSize;
            
            for (let i = 0; i < numberOfIntervals; i++) {
                const startMinutes = startHour * 60 + (i * intervalSize);
                const endMinutes = startMinutes + intervalSize;
                
                const startTime = formatTimeFromMinutes(startMinutes);
                const endTime = formatTimeFromMinutes(endMinutes);
                
                intervals.push({
                    start: startTime,
                    end: endTime,
                    startMinutes: startMinutes,
                    percentage: 0
                });
            }
            
            // Aplicar patr√≥n est√°ndar
            applyDistributionPattern(intervals, 'standard');
            
            // Generar controles de distribuci√≥n
            generateVolumeDistribution(intervals);
            
            // Calcular staffing inicial
            calculateIntervalStaffing();
        }
        
        function formatTimeFromMinutes(totalMinutes) {
            const hours = Math.floor(totalMinutes / 60);
            const minutes = totalMinutes % 60;
            return `${hours.toString().padStart(2, '0')}:${minutes.toString().padStart(2, '0')}`;
        }
        
        function applyDistributionPattern(intervals, patternName) {
            const pattern = distributionPatterns[patternName];
            if (!pattern) return;
            
            // Interpolar el patr√≥n al n√∫mero de intervalos
            const interpolated = interpolatePattern(pattern, intervals.length);
            
            // Normalizar para que sume 100%
            const sum = interpolated.reduce((a, b) => a + b, 0);
            
            intervals.forEach((interval, index) => {
                interval.percentage = (interpolated[index] / sum * 100).toFixed(1);
            });
        }
        
        function interpolatePattern(pattern, targetLength) {
            if (pattern.length === targetLength) return pattern;
            
            const result = [];
            const step = (pattern.length - 1) / (targetLength - 1);
            
            for (let i = 0; i < targetLength; i++) {
                const pos = i * step;
                const index = Math.floor(pos);
                const fraction = pos - index;
                
                if (index >= pattern.length - 1) {
                    result.push(pattern[pattern.length - 1]);
                } else {
                    const interpolated = pattern[index] * (1 - fraction) + pattern[index + 1] * fraction;
                    result.push(interpolated);
                }
            }
            
            return result;
        }
        
        function generateVolumeDistribution(intervals) {
            const container = document.getElementById('volumeDistribution');
            
            let html = '<div style="display: grid; grid-template-columns: repeat(auto-fit, minmax(200px, 1fr)); gap: 15px;">';
            
            intervals.forEach((interval, index) => {
                html += `
                    <div style="background: white; padding: 15px; border-radius: 10px; border: 1px solid var(--color-border);">
                        <div style="font-weight: 600; margin-bottom: 8px;">${interval.start} - ${interval.end}</div>
                        <div style="display: flex; align-items: center; gap: 10px;">
                            <input type="range" 
                                   id="interval_${index}" 
                                   min="0" 
                                   max="25" 
                                   step="0.1" 
                                   value="${interval.percentage}"
                                   class="slider"
                                   oninput="updateInterval(${index}, this.value)"
                                   style="flex: 1;">
                            <span id="intervalValue_${index}" style="font-weight: bold; min-width: 45px; text-align: right;">${interval.percentage}%</span>
                        </div>
                    </div>
                `;
            });
            
            html += '</div>';
            
            // Botones de patrones predefinidos
            html += `
                <div style="margin-top: 20px; display: flex; gap: 10px; flex-wrap: wrap;">
                    <span style="font-weight: 600; margin-right: 10px; align-self: center;">Patrones predefinidos:</span>
                    <button onclick="applyPattern('standard')" class="button" style="padding: 8px 16px; margin: 0; width: auto; font-size: 14px;">üìä Est√°ndar</button>
                    <button onclick="applyPattern('morning')" class="button" style="padding: 8px 16px; margin: 0; width: auto; font-size: 14px;">üåÖ Matutino</button>
                    <button onclick="applyPattern('afternoon')" class="button" style="padding: 8px 16px; margin: 0; width: auto; font-size: 14px;">‚òÄÔ∏è Vespertino</button>
                    <button onclick="applyPattern('evening')" class="button" style="padding: 8px 16px; margin: 0; width: auto; font-size: 14px;">üåÜ Nocturno</button>
                </div>
            `;
            
            container.innerHTML = html;
            intervalData = intervals;
            updateTotalDistribution();
        }
        
        function updateInterval(index, value) {
            intervalData[index].percentage = parseFloat(value);
            document.getElementById(`intervalValue_${index}`).textContent = value + '%';
            updateTotalDistribution();
            calculateIntervalStaffing();
        }
        
        function updateTotalDistribution() {
            const total = intervalData.reduce((sum, interval) => sum + parseFloat(interval.percentage), 0);
            const element = document.getElementById('totalDistribution');
            element.textContent = total.toFixed(1) + '%';
            
            // Cambiar color seg√∫n si suma 100%
            if (Math.abs(total - 100) < 0.1) {
                element.style.color = 'var(--color-success)';
            } else {
                element.style.color = 'var(--color-error)';
            }
        }
        
        function applyPattern(patternName) {
            applyDistributionPattern(intervalData, patternName);
            
            // Actualizar sliders
            intervalData.forEach((interval, index) => {
                const slider = document.getElementById(`interval_${index}`);
                const valueSpan = document.getElementById(`intervalValue_${index}`);
                slider.value = interval.percentage;
                valueSpan.textContent = interval.percentage + '%';
            });
            
            updateTotalDistribution();
            calculateIntervalStaffing();
        }
        
        function calculateIntervalStaffing() {
            if (!currentCalculation || !intervalData.length) return;
            
            const calc = currentCalculation;
            const tbody = document.getElementById('staffingTableBody');
            let html = '';
            
            const staffingResults = [];
            
            intervalData.forEach((interval, index) => {
                // Calcular llamadas para este intervalo
                const intervalCalls = (calc.callVolume * parseFloat(interval.percentage)) / 100;
                const intervalHours = parseInt(document.getElementById('intervalSize').value) / 60;
                const callsPerHour = intervalCalls / intervalHours;
                
                // Calcular Erlangs para este intervalo
                const intervalErlangs = (callsPerHour * calc.aht) / 3600;
                
                // Calcular agentes necesarios
                let agents = Math.ceil(intervalErlangs);
                let serviceLevel = 0;
                
                if (agents > 0) {
                    while (serviceLevel < calc.targetServiceLevel && agents < 100) {
                        agents++;
                        serviceLevel = serviceLevelAchieved(intervalErlangs, agents, calc.aht, calc.targetTime);
                    }
                }
                
                // M√©tricas adicionales
                const agentsWithShrinkage = Math.ceil(agents / (1 - calc.shrinkage / 100));
                const occupancy = agents > 0 ? (intervalErlangs / agents) * 100 : 0;
                const asa = agents > intervalErlangs ? averageWaitTime(intervalErlangs, agents, calc.aht) : 999;
                
                // Status color
                let statusColor = '';
                if (serviceLevel >= calc.targetServiceLevel) {
                    statusColor = 'background: #e6f7f0; color: #0d8a54;';
                } else if (serviceLevel >= calc.targetServiceLevel - 5) {
                    statusColor = 'background: #fef3c7; color: #92400e;';
                } else {
                    statusColor = 'background: #fdeaea; color: #d92d20;';
                }
                
                html += `
                    <tr style="border-bottom: 1px solid #e2e8f0;">
                        <td style="padding: 12px; font-weight: 600;">${interval.start} - ${interval.end}</td>
                        <td style="padding: 12px; text-align: center;">${Math.round(intervalCalls)}</td>
                        <td style="padding: 12px; text-align: center;">${intervalErlangs.toFixed(2)}</td>
                        <td style="padding: 12px; text-align: center; font-weight: bold; color: var(--color-primary-end);">${agents}</td>
                        <td style="padding: 12px; text-align: center; font-weight: bold;">${agentsWithShrinkage}</td>
                        <td style="padding: 12px; text-align: center; ${statusColor} border-radius: 6px; font-weight: bold;">${serviceLevel.toFixed(1)}%</td>
                        <td style="padding: 12px; text-align: center;">${asa < 999 ? asa.toFixed(0) + 's' : '‚àû'}</td>
                        <td style="padding: 12px; text-align: center;">${occupancy.toFixed(1)}%</td>
                    </tr>
                `;
                
                staffingResults.push({
                    interval: `${interval.start}-${interval.end}`,
                    calls: Math.round(intervalCalls),
                    erlangs: intervalErlangs,
                    agents: agents,
                    agentsWithShrinkage: agentsWithShrinkage,
                    serviceLevel: serviceLevel,
                    asa: asa < 999 ? asa : 0,
                    occupancy: occupancy
                });
            });
            
            tbody.innerHTML = html;
            
            // Crear gr√°fico
            createStaffingChart(staffingResults);
        }
        
        function createStaffingChart(data) {
            const canvas = document.getElementById('staffingChart');
            const ctx = canvas.getContext('2d');
            
            // Limpiar canvas
            ctx.clearRect(0, 0, canvas.width, canvas.height);
            
            if (!data.length) return;
            
            const padding = 50;
            const chartWidth = canvas.width - 2 * padding;
            const chartHeight = canvas.height - 2 * padding;
            
            const maxAgents = Math.max(...data.map(d => d.agentsWithShrinkage));
            const maxCalls = Math.max(...data.map(d => d.calls));
            
            // Configurar escalas
            const xStep = chartWidth / data.length;
            
            // Dibujar ejes
            ctx.strokeStyle = '#e2e8f0';
            ctx.lineWidth = 2;
            ctx.beginPath();
            ctx.moveTo(padding, padding);
            ctx.lineTo(padding, padding + chartHeight);
            ctx.lineTo(padding + chartWidth, padding + chartHeight);
            ctx.stroke();
            
            // Dibujar barras de agentes
            data.forEach((item, index) => {
                const x = padding + index * xStep + xStep * 0.1;
                const barWidth = xStep * 0.35;
                const barHeight = (item.agentsWithShrinkage / maxAgents) * chartHeight;
                const y = padding + chartHeight - barHeight;
                
                // Gradiente para barras de agentes
                const gradient = ctx.createLinearGradient(0, y, 0, y + barHeight);
                gradient.addColorStop(0, '#2575fc');
                gradient.addColorStop(1, '#6a11cb');
                
                ctx.fillStyle = gradient;
                ctx.fillRect(x, y, barWidth, barHeight);
                
                // Etiqueta de agentes
                ctx.fillStyle = '#1e293b';
                ctx.font = 'bold 11px Manrope';
                ctx.textAlign = 'center';
                ctx.fillText(item.agentsWithShrinkage, x + barWidth / 2, y - 5);
            });
            
            // Dibujar l√≠nea de llamadas
            ctx.strokeStyle = '#16a34a';
            ctx.lineWidth = 3;
            ctx.beginPath();
            
            data.forEach((item, index) => {
                const x = padding + index * xStep + xStep / 2;
                const y = padding + chartHeight - (item.calls / maxCalls) * chartHeight;
                
                if (index === 0) {
                    ctx.moveTo(x, y);
                } else {
                    ctx.lineTo(x, y);
                }
                
                // Puntos en la l√≠nea
                ctx.fillStyle = '#16a34a';
                ctx.beginPath();
                ctx.arc(x, y, 4, 0, 2 * Math.PI);
                ctx.fill();
            });
            ctx.stroke();
            
            // Etiquetas de tiempo
            ctx.fillStyle = '#64748b';
            ctx.font = '11px Manrope';
            ctx.textAlign = 'center';
            
            data.forEach((item, index) => {
                const x = padding + index * xStep + xStep / 2;
                const label = item.interval.split('-')[0]; // Solo hora de inicio
                ctx.fillText(label, x, canvas.height - 10);
            });
            
            // Leyendas
            ctx.fillStyle = '#1e293b';
            ctx.font = 'bold 14px Manrope';
            ctx.textAlign = 'center';
            ctx.fillText('Staffing por Intervalos', canvas.width / 2, 25);
            
            // Leyenda de colores
            ctx.fillStyle = '#2575fc';
            ctx.fillRect(padding, 35, 15, 10);
            ctx.fillStyle = '#64748b';
            ctx.font = '12px Manrope';
            ctx.textAlign = 'left';
            ctx.fillText('Agentes Totales', padding + 20, 44);
            
            ctx.strokeStyle = '#16a34a';
            ctx.lineWidth = 3;
            ctx.beginPath();
            ctx.moveTo(padding + 150, 40);
            ctx.lineTo(padding + 165, 40);
            ctx.stroke();
            ctx.fillText('Volumen Llamadas', padding + 170, 44);
        }
        
        * { margin: 0; padding: 0; box-sizing: border-box; }
        
        body {
            font-family: var(--font-family);
            background: var(--color-bg);
            color: var(--color-text);
            padding: 20px;
            min-height: 100vh;
        }
        
        .container {
            max-width: 1400px;
            margin: 0 auto;
            display: grid;
            grid-template-columns: 350px 1fr;
            gap: 30px;
            height: calc(100vh - 40px);
        }
        
        .sidebar {
            background: var(--color-surface);
            border-radius: 20px;
            padding: 30px;
            box-shadow: var(--shadow-lg);
            overflow-y: auto;
        }
        
        .main-content {
            background: var(--color-surface);
            border-radius: 20px;
            padding: 30px;
            box-shadow: var(--shadow-lg);
            overflow-y: auto;
        }
        
        h1 {
            color: var(--color-text);
            font-size: 28px;
            font-weight: 700;
            margin-bottom: 10px;
            background: linear-gradient(45deg, var(--color-primary-start), var(--color-primary-end));
            -webkit-background-clip: text;
            -webkit-text-fill-color: transparent;
            background-clip: text;
        }
        
        .subtitle {
            color: var(--color-text-secondary);
            font-size: 16px;
            margin-bottom: 30px;
        }
        
        .section {
            margin-bottom: 30px;
            padding: 25px;
            border-radius: 15px;
            border: 1px solid var(--color-border);
            background: #fafbff;
        }
        
        .section h3 {
            color: var(--color-text);
            font-size: 18px;
            font-weight: 600;
            margin-bottom: 20px;
            display: flex;
            align-items: center;
            gap: 10px;
        }
        
        .input-group {
            margin-bottom: 20px;
        }
        
        .input-group label {
            display: block;
            color: var(--color-text);
            font-weight: 600;
            margin-bottom: 8px;
            font-size: 14px;
        }
        
        .input-wrapper {
            position: relative;
        }
        
        .input-group input,
        .input-group select {
            width: 100%;
            padding: 12px 15px;
            border: 1px solid var(--color-border);
            border-radius: 10px;
            font-size: 16px;
            font-family: var(--font-family);
            background: var(--color-surface);
            transition: all 0.2s ease;
        }
        
        .input-group input:focus,
        .input-group select:focus {
            outline: none;
            border-color: var(--color-primary-end);
            box-shadow: 0 0 0 3px rgba(37, 117, 252, 0.1);
        }
        
        .unit {
            position: absolute;
            right: 15px;
            top: 50%;
            transform: translateY(-50%);
            color: var(--color-text-secondary);
            font-size: 14px;
            font-weight: 600;
        }
        
        .slider-container {
            margin: 20px 0;
        }
        
        .slider {
            width: 100%;
            height: 6px;
            border-radius: 3px;
            background: var(--color-border);
            outline: none;
            appearance: none;
        }
        
        .slider::-webkit-slider-thumb {
            appearance: none;
            width: 20px;
            height: 20px;
            border-radius: 50%;
            background: linear-gradient(45deg, var(--color-primary-start), var(--color-primary-end));
            cursor: pointer;
            box-shadow: 0 2px 6px rgba(0,0,0,0.2);
        }
        
        .slider::-moz-range-thumb {
            width: 20px;
            height: 20px;
            border-radius: 50%;
            background: linear-gradient(45deg, var(--color-primary-start), var(--color-primary-end));
            cursor: pointer;
            border: none;
            box-shadow: 0 2px 6px rgba(0,0,0,0.2);
        }
        
        .slider-labels {
            display: flex;
            justify-content: space-between;
            margin-top: 8px;
            font-size: 12px;
            color: var(--color-text-secondary);
        }
        
        .button {
            background: linear-gradient(45deg, var(--color-primary-start), var(--color-primary-end));
            color: white;
            border: none;
            padding: 15px 30px;
            border-radius: 12px;
            font-size: 16px;
            font-weight: 600;
            cursor: pointer;
            transition: all 0.3s ease;
            width: 100%;
            margin: 20px 0;
        }
        
        .button:hover {
            transform: translateY(-2px);
            box-shadow: 0 10px 25px rgba(37, 117, 252, 0.3);
        }
        
        .results-grid {
            display: grid;
            grid-template-columns: repeat(auto-fit, minmax(300px, 1fr));
            gap: 25px;
            margin-bottom: 30px;
        }
        
        .metric-card {
            background: var(--color-surface);
            border: 1px solid var(--color-border);
            border-radius: 15px;
            padding: 25px;
            box-shadow: 0 4px 15px rgba(0,0,0,0.05);
            transition: all 0.3s ease;
        }
        
        .metric-card:hover {
            transform: translateY(-2px);
            box-shadow: 0 8px 25px rgba(0,0,0,0.1);
        }
        
        .metric-card h4 {
            color: var(--color-text-secondary);
            font-size: 14px;
            font-weight: 600;
            margin-bottom: 10px;
            text-transform: uppercase;
            letter-spacing: 0.5px;
        }
        
        .metric-value {
            font-size: 32px;
            font-weight: 700;
            color: var(--color-text);
            margin-bottom: 5px;
        }
        
        .metric-unit {
            font-size: 14px;
            color: var(--color-text-secondary);
        }
        
        .charts-container {
            display: grid;
            grid-template-columns: 1fr 1fr;
            gap: 30px;
            margin-top: 30px;
        }
        
        .chart-container {
            background: var(--color-surface);
            border: 1px solid var(--color-border);
            border-radius: 15px;
            padding: 25px;
            height: 400px;
        }
        
        .chart-title {
            font-size: 18px;
            font-weight: 600;
            color: var(--color-text);
            margin-bottom: 20px;
            text-align: center;
        }
        
        .tabs {
            display: flex;
            margin-bottom: 30px;
            border-radius: 12px;
            background: var(--color-border);
            padding: 4px;
        }
        
        .tab {
            flex: 1;
            padding: 12px 20px;
            background: transparent;
            border: none;
            border-radius: 8px;
            font-size: 14px;
            font-weight: 600;
            cursor: pointer;
            transition: all 0.2s ease;
            color: var(--color-text-secondary);
        }
        
        .tab.active {
            background: var(--color-surface);
            color: var(--color-text);
            box-shadow: 0 2px 8px rgba(0,0,0,0.1);
        }
        
        .scenario-container {
            display: none;
            grid-template-columns: repeat(auto-fit, minmax(280px, 1fr));
            gap: 20px;
            margin-top: 20px;
        }
        
        .scenario-container.active {
            display: grid;
        }
        
        .scenario-card {
            background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
            color: white;
            border-radius: 15px;
            padding: 25px;
            cursor: pointer;
            transition: all 0.3s ease;
        }
        
        .scenario-card:hover {
            transform: translateY(-5px);
            box-shadow: 0 15px 35px rgba(0,0,0,0.2);
        }
        
        .scenario-card h5 {
            font-size: 16px;
            font-weight: 600;
            margin-bottom: 10px;
        }
        
        .scenario-card p {
            font-size: 14px;
            opacity: 0.9;
            margin-bottom: 15px;
        }
        
        .scenario-stats {
            display: grid;
            grid-template-columns: 1fr 1fr;
            gap: 10px;
            font-size: 12px;
        }
        
        .status-indicator {
            display: inline-flex;
            align-items: center;
            gap: 6px;
            font-size: 12px;
            font-weight: 600;
            margin-top: 10px;
        }
        
        .status-dot {
            width: 8px;
            height: 8px;
            border-radius: 50%;
        }
        
        .status-good .status-dot { background: var(--color-success); }
        .status-warning .status-dot { background: var(--color-warning); }
        .status-critical .status-dot { background: var(--color-error); }
        
        .formula-display {
            background: #1e293b;
            color: #e2e8f0;
            border-radius: 10px;
            padding: 20px;
            margin: 20px 0;
            font-family: 'Courier New', monospace;
            font-size: 14px;
            overflow-x: auto;
        }
        
        .help-tooltip {
            position: relative;
            display: inline-block;
            cursor: help;
            color: var(--color-primary-end);
            margin-left: 5px;
        }
        
        .help-tooltip:hover::after {
            content: attr(data-tooltip);
            position: absolute;
            bottom: 125%;
            left: 50%;
            transform: translateX(-50%);
            background: var(--color-text);
            color: white;
            padding: 8px 12px;
            border-radius: 8px;
            font-size: 12px;
            white-space: nowrap;
            z-index: 1000;
            box-shadow: 0 4px 15px rgba(0,0,0,0.2);
        }
        
        @media (max-width: 1024px) {
            .container {
                grid-template-columns: 1fr;
                gap: 20px;
            }
            
            .charts-container {
                grid-template-columns: 1fr;
            }
        }
    </style>
</head>
<body>
    <div class="container">
        <!-- Sidebar de Configuraci√≥n -->
        <div class="sidebar">
            <h1>üìä Erlang Calculator</h1>
            <p class="subtitle">Dimensionamiento profesional para Call Center Inbound</p>
            
            <!-- Par√°metros B√°sicos -->
            <div class="section">
                <h3>üìà Par√°metros de Tr√°fico</h3>
                
                <div class="input-group">
                    <label for="callVolume">Volumen de Llamadas
                        <span class="help-tooltip" data-tooltip="N√∫mero total de llamadas en el per√≠odo">‚ÑπÔ∏è</span>
                    </label>
                    <div class="input-wrapper">
                        <input type="number" id="callVolume" value="1000" min="1" max="10000">
                        <span class="unit">llamadas</span>
                    </div>
                </div>
                
                <div class="input-group">
                    <label for="periodHours">Per√≠odo de An√°lisis
                        <span class="help-tooltip" data-tooltip="Duraci√≥n del per√≠odo de an√°lisis">‚ÑπÔ∏è</span>
                    </label>
                    <div class="input-wrapper">
                        <input type="number" id="periodHours" value="8" min="0.5" max="24" step="0.5">
                        <span class="unit">horas</span>
                    </div>
                </div>
                
                <div class="input-group">
                    <label for="aht">AHT (Average Handle Time)
                        <span class="help-tooltip" data-tooltip="Tiempo promedio de manejo incluyendo hold y after call work">‚ÑπÔ∏è</span>
                    </label>
                    <div class="slider-container">
                        <input type="range" id="ahtSlider" class="slider" min="60" max="900" value="300">
                        <div class="slider-labels">
                            <span>1 min</span>
                            <span id="ahtValue">5.0 min</span>
                            <span>15 min</span>
                        </div>
                    </div>
                </div>
                
                <div class="input-group">
                    <label for="serviceLevel">Nivel de Servicio Objetivo
                        <span class="help-tooltip" data-tooltip="Porcentaje de llamadas atendidas dentro del tiempo objetivo">‚ÑπÔ∏è</span>
                    </label>
                    <div class="slider-container">
                        <input type="range" id="serviceLevelSlider" class="slider" min="70" max="99" value="80">
                        <div class="slider-labels">
                            <span>70%</span>
                            <span id="serviceLevelValue">80%</span>
                            <span>99%</span>
                        </div>
                    </div>
                </div>
                
                <div class="input-group">
                    <label for="targetTime">Tiempo Objetivo
                        <span class="help-tooltip" data-tooltip="Tiempo m√°ximo en segundos para considerar la llamada como atendida a tiempo">‚ÑπÔ∏è</span>
                    </label>
                    <div class="input-wrapper">
                        <input type="number" id="targetTime" value="20" min="5" max="120">
                        <span class="unit">seg</span>
                    </div>
                </div>
            </div>
            
            <!-- Configuraci√≥n Avanzada -->
            <div class="section">
                <h3>‚öôÔ∏è Par√°metros Avanzados</h3>
                
                <div class="input-group">
                    <label for="shrinkage">Shrinkage
                        <span class="help-tooltip" data-tooltip="Tiempo no productivo: breaks, entrenamientos, ausencias">‚ÑπÔ∏è</span>
                    </label>
                    <div class="slider-container">
                        <input type="range" id="shrinkageSlider" class="slider" min="10" max="50" value="25">
                        <div class="slider-labels">
                            <span>10%</span>
                            <span id="shrinkageValue">25%</span>
                            <span>50%</span>
                        </div>
                    </div>
                </div>
                
                <div class="input-group">
                    <label for="occupancy">Ocupaci√≥n Objetivo
                        <span class="help-tooltip" data-tooltip="Porcentaje del tiempo que el agente debe estar ocupado">‚ÑπÔ∏è</span>
                    </label>
                    <div class="slider-container">
                        <input type="range" id="occupancySlider" class="slider" min="60" max="95" value="85">
                        <div class="slider-labels">
                            <span>60%</span>
                            <span id="occupancyValue">85%</span>
                            <span>95%</span>
                        </div>
                    </div>
                </div>
                
                <div class="input-group">
                    <label for="erlangModel">Modelo Erlang</label>
                    <select id="erlangModel">
                        <option value="erlangC">Erlang C (Con Cola)</option>
                        <option value="erlangA">Erlang A (Con Abandono)</option>
                    </select>
                </div>
                
                <div class="input-group" id="abandonmentGroup" style="display: none;">
                    <label for="patience">Paciencia Promedio
                        <span class="help-tooltip" data-tooltip="Tiempo promedio que espera un cliente antes de abandonar">‚ÑπÔ∏è</span>
                    </label>
                    <div class="input-wrapper">
                        <input type="number" id="patience" value="60" min="10" max="300">
                        <span class="unit">seg</span>
                    </div>
                </div>
            </div>
            
            <button class="button" onclick="calculate()">üöÄ Calcular Dimensionamiento</button>
        </div>
        
        <!-- Contenido Principal -->
        <div class="main-content">
            <!-- Tabs -->
            <div class="tabs">
                <button class="tab active" onclick="showTab('results')">üìä Resultados</button>
                <button class="tab" onclick="showTab('intervals')">‚è∞ Intervalos Horarios</button>
                <button class="tab" onclick="showTab('scenarios')">üéØ Escenarios</button>
                <button class="tab" onclick="showTab('analysis')">üìà An√°lisis</button>
            </div>
            
            <!-- Resultados -->
            <div id="resultsTab" class="tab-content">
                <div class="results-grid">
                    <div class="metric-card">
                        <h4>Agentes Requeridos</h4>
                        <div class="metric-value" id="agentsRequired">-</div>
                        <div class="metric-unit">agentes base</div>
                        <div class="status-indicator" id="agentsStatus">
                            <div class="status-dot"></div>
                            <span>Calculando...</span>
                        </div>
                    </div>
                    
                    <div class="metric-card">
                        <h4>Total con Shrinkage</h4>
                        <div class="metric-value" id="totalAgents">-</div>
                        <div class="metric-unit">agentes totales</div>
                        <div class="status-indicator" id="totalStatus">
                            <div class="status-dot"></div>
                            <span>Incluye tiempo no productivo</span>
                        </div>
                    </div>
                    
                    <div class="metric-card">
                        <h4>Intensidad de Tr√°fico</h4>
                        <div class="metric-value" id="trafficIntensity">-</div>
                        <div class="metric-unit">Erlangs</div>
                        <div class="status-indicator">
                            <div class="status-dot" style="background: var(--color-primary-end);"></div>
                            <span>Carga del sistema</span>
                        </div>
                    </div>
                    
                    <div class="metric-card">
                        <h4>Ocupaci√≥n Real</h4>
                        <div class="metric-value" id="actualOccupancy">-</div>
                        <div class="metric-unit">%</div>
                        <div class="status-indicator" id="occupancyStatus">
                            <div class="status-dot"></div>
                            <span>Eficiencia agentes</span>
                        </div>
                    </div>
                    
                    <div class="metric-card">
                        <h4>Tiempo Espera Promedio</h4>
                        <div class="metric-value" id="avgWaitTime">-</div>
                        <div class="metric-unit">segundos</div>
                        <div class="status-indicator" id="waitTimeStatus">
                            <div class="status-dot"></div>
                            <span>ASA (Average Speed Answer)</span>
                        </div>
                    </div>
                    
                    <div class="metric-card">
                        <h4>Nivel de Servicio Real</h4>
                        <div class="metric-value" id="actualServiceLevel">-</div>
                        <div class="metric-unit">%</div>
                        <div class="status-indicator" id="serviceLevelStatus">
                            <div class="status-dot"></div>
                            <span>SLA Achievement</span>
                        </div>
                    </div>
                </div>
                
                <!-- F√≥rmulas utilizadas -->
                <div class="section">
                    <h3>üìù F√≥rmulas Utilizadas</h3>
                    <div class="formula-display" id="formulaDisplay">
                        Selecciona "Calcular Dimensionamiento" para ver las f√≥rmulas aplicadas
                    </div>
                </div>
            </div>
            
            <!-- Intervalos Horarios -->
            <div id="intervalsTab" class="tab-content" style="display: none;">
                <div class="section">
                    <h3>‚è∞ Configuraci√≥n de Intervalos</h3>
                    <div style="display: grid; grid-template-columns: 1fr 1fr 1fr; gap: 20px; margin-bottom: 20px;">
                        <div class="input-group">
                            <label for="startHour">Hora Inicio</label>
                            <select id="startHour">
                                <option value="6">06:00</option>
                                <option value="7">07:00</option>
                                <option value="8" selected>08:00</option>
                                <option value="9">09:00</option>
                            </select>
                        </div>
                        <div class="input-group">
                            <label for="endHour">Hora Fin</label>
                            <select id="endHour">
                                <option value="17">17:00</option>
                                <option value="18" selected>18:00</option>
                                <option value="19">19:00</option>
                                <option value="20">20:00</option>
                                <option value="21">21:00</option>
                                <option value="22">22:00</option>
                            </select>
                        </div>
                        <div class="input-group">
                            <label for="intervalSize">Tama√±o Intervalo</label>
                            <select id="intervalSize">
                                <option value="15">15 minutos</option>
                                <option value="30">30 minutos</option>
                                <option value="60" selected>1 hora</option>
                            </select>
                        </div>
                    </div>
                    <button class="button" onclick="generateIntervals()" style="width: auto; margin: 0;">üïí Generar Planificaci√≥n por Intervalos</button>
                </div>
                
                <!-- Distribuci√≥n de Volumen -->
                <div class="section">
                    <h3>üìà Distribuci√≥n de Volumen por Hora</h3>
                    <p style="margin-bottom: 20px; color: var(--color-text-secondary);">
                        Ajusta el porcentaje de llamadas para cada hora. El sistema calcular√° autom√°ticamente los agentes necesarios.
                    </p>
                    <div id="volumeDistribution">
                        <!-- Se generar√° din√°micamente -->
                    </div>
                    <div style="margin-top: 15px; padding: 15px; background: #f0f9ff; border-radius: 8px; border: 1px solid #0ea5e9;">
                        <strong>Total de distribuci√≥n: <span id="totalDistribution">0%</span></strong>
                        <div style="font-size: 12px; color: var(--color-text-secondary); margin-top: 5px;">
                            Debe sumar 100% para una distribuci√≥n v√°lida
                        </div>
                    </div>
                </div>
                
                <!-- Tabla de Staffing -->
                <div class="section">
                    <h3>üë• Plan de Staffing por Intervalos</h3>
                    <div style="overflow-x: auto;">
                        <table id="staffingTable" style="width: 100%; border-collapse: collapse; margin-top: 20px;">
                            <thead style="background: linear-gradient(45deg, var(--color-primary-start), var(--color-primary-end)); color: white;">
                                <tr>
                                    <th style="padding: 15px; border: 1px solid #ddd; text-align: left;">Intervalo</th>
                                    <th style="padding: 15px; border: 1px solid #ddd; text-align: center;">Llamadas</th>
                                    <th style="padding: 15px; border: 1px solid #ddd; text-align: center;">Erlangs</th>
                                    <th style="padding: 15px; border: 1px solid #ddd; text-align: center;">Agentes Base</th>
                                    <th style="padding: 15px; border: 1px solid #ddd; text-align: center;">Con Shrinkage</th>
                                    <th style="padding: 15px; border: 1px solid #ddd; text-align: center;">Nivel Servicio</th>
                                    <th style="padding: 15px; border: 1px solid #ddd; text-align: center;">ASA</th>
                                    <th style="padding: 15px; border: 1px solid #ddd; text-align: center;">Ocupaci√≥n</th>
                                </tr>
                            </thead>
                            <tbody id="staffingTableBody">
                                <tr>
                                    <td colspan="8" style="padding: 30px; text-align: center; color: var(--color-text-secondary);">
                                        Haz clic en "Generar Planificaci√≥n por Intervalos" para ver los resultados
                                    </td>
                                </tr>
                            </tbody>
                        </table>
                    </div>
                </div>
                
                <!-- Gr√°fico de Staffing -->
                <div class="section">
                    <h3>üìä Visualizaci√≥n de Staffing</h3>
                    <div class="chart-container" style="height: 350px; margin-top: 20px;">
                        <canvas id="staffingChart" width="800" height="300"></canvas>
                    </div>
                </div>
            </div>
            
            <!-- Escenarios -->
            <div id="scenariosTab" class="tab-content scenario-container">
                <!-- Los escenarios se generar√°n din√°micamente -->
            </div>
            
            <!-- An√°lisis -->
            <div id="analysisTab" class="tab-content" style="display: none;">
                <div class="charts-container">
                    <div class="chart-container">
                        <div class="chart-title">Sensibilidad de Agentes vs Nivel de Servicio</div>
                        <canvas id="sensitivityChart" width="400" height="300"></canvas>
                    </div>
                    <div class="chart-container">
                        <div class="chart-title">Comparaci√≥n de Modelos Erlang</div>
                        <canvas id="comparisonChart" width="400" height="300"></canvas>
                    </div>
                </div>
            </div>
        </div>
    </div>

    <script>
        // Variables globales
        let currentCalculation = null;
        let intervalData = [];
        
        // Patrones de distribuci√≥n predefinidos
        const distributionPatterns = {
            standard: [5, 6, 8, 10, 12, 14, 15, 12, 10, 8],
            morning: [3, 4, 6, 10, 15, 20, 18, 12, 8, 4],
            afternoon: [8, 8, 10, 12, 14, 10, 12, 15, 8, 3],
            evening: [10, 12, 14, 15, 12, 10, 8, 6, 8, 5]
        };
        
        // Actualizar sliders en tiempo real
        document.getElementById('ahtSlider').oninput = function() {
            document.getElementById('ahtValue').textContent = (this.value / 60).toFixed(1) + ' min';
        };
        
        document.getElementById('serviceLevelSlider').oninput = function() {
            document.getElementById('serviceLevelValue').textContent = this.value + '%';
        };
        
        document.getElementById('shrinkageSlider').oninput = function() {
            document.getElementById('shrinkageValue').textContent = this.value + '%';
        };
        
        document.getElementById('occupancySlider').oninput = function() {
            document.getElementById('occupancyValue').textContent = this.value + '%';
        };
        
        // Mostrar/ocultar campos seg√∫n modelo Erlang
        document.getElementById('erlangModel').onchange = function() {
            const abandonmentGroup = document.getElementById('abandonmentGroup');
            if (this.value === 'erlangA') {
                abandonmentGroup.style.display = 'block';
            } else {
                abandonmentGroup.style.display = 'none';
            }
        };
        
        // Funciones matem√°ticas para Erlang
        function factorial(n) {
            if (n <= 1) return 1;
            let result = 1;
            for (let i = 2; i <= n; i++) {
                result *= i;
            }
            return result;
        }
        
        function erlangB(erlangs, agents) {
            let numerator = Math.pow(erlangs, agents) / factorial(agents);
            let denominator = 0;
            for (let i = 0; i <= agents; i++) {
                denominator += Math.pow(erlangs, i) / factorial(i);
            }
            return numerator / denominator;
        }
        
        function erlangC(erlangs, agents) {
            if (agents <= erlangs) return 1;
            
            let erlangBValue = erlangB(erlangs, agents);
            return (agents * erlangBValue) / (agents - erlangs + (agents * erlangBValue));
        }
        
        function averageWaitTime(erlangs, agents, aht) {
            if (agents <= erlangs) return Infinity;
            
            let pwait = erlangC(erlangs, agents);
            return (pwait * aht) / (agents - erlangs);
        }
        
        function serviceLevelAchieved(erlangs, agents, aht, targetTime) {
            if (agents <= erlangs) return 0;
            
            let pwait = erlangC(erlangs, agents);
            let awt = averageWaitTime(erlangs, agents, aht);
            
            if (awt === 0) return 100;
            
            return (1 - pwait * Math.exp(-((agents - erlangs) * targetTime) / aht)) * 100;
        }
        
        // Funci√≥n principal de c√°lculo
        function calculate() {
            const callVolume = parseInt(document.getElementById('callVolume').value);
            const periodHours = parseFloat(document.getElementById('periodHours').value);
            const aht = parseInt(document.getElementById('ahtSlider').value);
            const targetServiceLevel = parseInt(document.getElementById('serviceLevelSlider').value);
            const targetTime = parseInt(document.getElementById('targetTime').value);
            const shrinkage = parseInt(document.getElementById('shrinkageSlider').value);
            const targetOccupancy = parseInt(document.getElementById('occupancySlider').value);
            const erlangModel = document.getElementById('erlangModel').value;
            
            // Calcular intensidad de tr√°fico (Erlangs)
            const callsPerHour = callVolume / periodHours;
            const trafficIntensity = (callsPerHour * aht) / 3600;
            
            // Encontrar n√∫mero √≥ptimo de agentes
            let agents = Math.ceil(trafficIntensity);
            let currentServiceLevel = 0;
            
            while (currentServiceLevel < targetServiceLevel && agents < 200) {
                agents++;
                currentServiceLevel = serviceLevelAchieved(trafficIntensity, agents, aht, targetTime);
            }
            
            // Calcular m√©tricas
            const actualOccupancy = (trafficIntensity / agents) * 100;
            const avgWait = averageWaitTime(trafficIntensity, agents, aht);
            const totalAgents = Math.ceil(agents / (1 - shrinkage / 100));
            
            // Guardar c√°lculo actual
            currentCalculation = {
                callVolume,
                periodHours,
                aht,
                targetServiceLevel,
                targetTime,
                shrinkage,
                targetOccupancy,
                erlangModel,
                trafficIntensity,
                agents,
                totalAgents,
                actualOccupancy,
                avgWait,
                currentServiceLevel
            };
            
            // Actualizar UI
            updateResults();
            generateScenarios();
            updateFormulas();
        }
        
        function updateResults() {
            const calc = currentCalculation;
            
            document.getElementById('agentsRequired').textContent = calc.agents;
            document.getElementById('totalAgents').textContent = calc.totalAgents;
            document.getElementById('trafficIntensity').textContent = calc.trafficIntensity.toFixed(2);
            document.getElementById('actualOccupancy').textContent = calc.actualOccupancy.toFixed(1);
            document.getElementById('avgWaitTime').textContent = calc.avgWait.toFixed(0);
            document.getElementById('actualServiceLevel').textContent = calc.currentServiceLevel.toFixed(1);
            
            // Actualizar indicadores de estado
            updateStatusIndicators(calc);
        }
        
        function updateStatusIndicators(calc) {
            // Estado de agentes
            const agentsStatus = document.getElementById('agentsStatus');
            if (calc.currentServiceLevel >= calc.targetServiceLevel) {
                agentsStatus.className = 'status-indicator status-good';
                agentsStatus.innerHTML = '<div class="status-dot"></div><span>Objetivo alcanzado</span>';
            } else {
                agentsStatus.className = 'status-indicator status-warning';
                agentsStatus.innerHTML = '<div class="status-dot"></div><span>Por debajo del objetivo</span>';
            }
            
            // Estado de ocupaci√≥n
            const occupancyStatus = document.getElementById('occupancyStatus');
            if (calc.actualOccupancy >= 75 && calc.actualOccupancy <= 90) {
                occupancyStatus.className = 'status-indicator status-good';
                occupancyStatus.innerHTML = '<div class="status-dot"></div><span>√ìptima eficiencia</span>';
            } else if (calc.actualOccupancy > 90) {
                occupancyStatus.className = 'status-indicator status-critical';
                occupancyStatus.innerHTML = '<div class="status-dot"></div><span>Sobrecarga</span>';
            } else {
                occupancyStatus.className = 'status-indicator status-warning';
                occupancyStatus.innerHTML = '<div class="status-dot"></div><span>Baja utilizaci√≥n</span>';
            }
            
            // Estado tiempo de espera
            const waitTimeStatus = document.getElementById('waitTimeStatus');
            if (calc.avgWait <= calc.targetTime) {
                waitTimeStatus.className = 'status-indicator status-good';
                waitTimeStatus.innerHTML = '<div class="status-dot"></div><span>Dentro del objetivo</span>';
            } else if (calc.avgWait <= calc.targetTime * 2) {
                waitTimeStatus.className = 'status-indicator status-warning';
                waitTimeStatus.innerHTML = '<div class="status-dot"></div><span>Ligeramente alto</span>';
            } else {
                waitTimeStatus.className = 'status-indicator status-critical';
                waitTimeStatus.innerHTML = '<div class="status-dot"></div><span>Muy alto</span>';
            }
            
            // Estado nivel de servicio
            const serviceLevelStatus = document.getElementById('serviceLevelStatus');
            if (calc.currentServiceLevel >= calc.targetServiceLevel) {
                serviceLevelStatus.className = 'status-indicator status-good';
                serviceLevelStatus.innerHTML = '<div class="status-dot"></div><span>SLA cumplido</span>';
            } else if (calc.currentServiceLevel >= calc.targetServiceLevel - 5) {
                serviceLevelStatus.className = 'status-indicator status-warning';
                serviceLevelStatus.innerHTML = '<div class="status-dot"></div><span>Cerca del objetivo</span>';
            } else {
                serviceLevelStatus.className = 'status-indicator status-critical';
                serviceLevelStatus.innerHTML = '<div class="status-dot"></div><span>SLA incumplido</span>';
            }
        }
        
        function generateScenarios() {
            if (!currentCalculation) return;
            
            const scenariosContainer = document.getElementById('scenariosTab');
            const calc = currentCalculation;
            
            const scenarios = [
                {
                    title: 'Escenario Conservador',
                    description: 'Dimensionamiento con margen adicional de seguridad',
                    agents: calc.agents + Math.ceil(calc.agents * 0.15),
                    color: 'linear-gradient(135deg, #16a34a 0%, #15803d 100%)'
                },
                {
                    title: 'Escenario Optimista',
                    description: 'Dimensionamiento m√≠nimo para cumplir objetivos',
                    agents: Math.max(1, calc.agents - 1),
                    color: 'linear-gradient(135deg, #f59e0b 0%, #d97706 100%)'
                },
                {
                    title: 'Escenario de Pico',
                    description: 'Preparado para 20% m√°s tr√°fico del esperado',
                    agents: Math.ceil(calc.agents * 1.2),
                    color: 'linear-gradient(135deg, #ef4444 0%, #dc2626 100%)'
                },
                {
                    title: 'Escenario Eficiente',
                    description: 'Balance √≥ptimo entre costo y servicio',
                    agents: calc.agents,
                    color: 'linear-gradient(135deg, #667eea 0%, #764ba2 100%)'
                }
            ];
            
            let html = '';
            scenarios.forEach((scenario, index) => {
                const trafficIntensity = calc.trafficIntensity;
                const serviceLevel = serviceLevelAchieved(trafficIntensity, scenario.agents, calc.aht, calc.targetTime);
                const occupancy = (trafficIntensity / scenario.agents) * 100;
                const waitTime = averageWaitTime(trafficIntensity, scenario.agents, calc.aht);
                const totalWithShrinkage = Math.ceil(scenario.agents / (1 - calc.shrinkage / 100));
                
                html += `
                    <div class="scenario-card" style="background: ${scenario.color};" onclick="applyScenario(${index})">
                        <h5>${scenario.title}</h5>
                        <p>${scenario.description}</p>
                        <div class="scenario-stats">
                            <div>Agentes: <strong>${scenario.agents}</strong></div>
                            <div>Total: <strong>${totalWithShrinkage}</strong></div>
                            <div>Nivel Servicio: <strong>${serviceLevel.toFixed(1)}%</strong></div>
                            <div>Ocupaci√≥n: <strong>${occupancy.toFixed(1)}%</strong></div>
                            <div>Espera Prom: <strong>${waitTime.toFixed(0)}s</strong></div>
                            <div>Costo Rel: <strong>${((totalWithShrinkage / calc.totalAgents - 1) * 100).toFixed(0)}%</strong></div>
                        </div>
                    </div>
                `;
            });
            
            scenariosContainer.innerHTML = html;
        }
        
        function applyScenario(scenarioIndex) {
            if (!currentCalculation) return;
            
            const scenarios = [
                { multiplier: 1.15, name: 'Conservador' },
                { multiplier: 0.95, name: 'Optimista' },
                { multiplier: 1.2, name: 'Pico' },
                { multiplier: 1, name: 'Eficiente' }
            ];
            
            const scenario = scenarios[scenarioIndex];
            let newAgents = Math.ceil(currentCalculation.agents * scenario.multiplier);
            if (scenarioIndex === 1) newAgents = Math.max(1, currentCalculation.agents - 1);
            
            // Recalcular con nuevos agentes
            const trafficIntensity = currentCalculation.trafficIntensity;
            const serviceLevel = serviceLevelAchieved(trafficIntensity, newAgents, currentCalculation.aht, currentCalculation.targetTime);
            const occupancy = (trafficIntensity / newAgents) * 100;
            const waitTime = averageWaitTime(trafficIntensity, newAgents, currentCalculation.aht);
            const totalAgents = Math.ceil(newAgents / (1 - currentCalculation.shrinkage / 100));
            
            // Actualizar c√°lculo actual
            currentCalculation.agents = newAgents;
            currentCalculation.totalAgents = totalAgents;
            currentCalculation.actualOccupancy = occupancy;
            currentCalculation.avgWait = waitTime;
            currentCalculation.currentServiceLevel = serviceLevel;
            
            // Actualizar resultados
            updateResults();
            updateFormulas();
            
            // Cambiar a tab de resultados
            showTab('results');
            
            // Mostrar notificaci√≥n
            alert(`Escenario "${scenario.name}" aplicado!\n\nAgentes base: ${newAgents}\nTotal con shrinkage: ${totalAgents}\nNivel de servicio: ${serviceLevel.toFixed(1)}%`);
        }
        
        function updateFormulas() {
            if (!currentCalculation) return;
            
            const calc = currentCalculation;
            const model = calc.erlangModel;
            
            let formulaHtml = `
                <div style="margin-bottom: 20px;">
                    <strong>Modelo Utilizado:</strong> ${model === 'erlangC' ? 'Erlang C (Con Cola de Espera)' : 'Erlang A (Con Abandono)'}
                </div>
                
                <div style="margin-bottom: 15px;">
                    <strong>1. Intensidad de Tr√°fico (A):</strong><br>
                    A = (Llamadas/hora √ó AHT) / 3600<br>
                    A = (${(calc.callVolume / calc.periodHours).toFixed(0)} √ó ${calc.aht}) / 3600 = <span style="color: #10b981;">${calc.trafficIntensity.toFixed(2)} Erlangs</span>
                </div>
                
                <div style="margin-bottom: 15px;">
                    <strong>2. Probabilidad de Espera (Erlang C):</strong><br>
                    Pw = (A^N / N!) / (‚àë(A^k / k!) + (A^N / N!) √ó N / (N - A))<br>
                    Donde A = ${calc.trafficIntensity.toFixed(2)}, N = ${calc.agents}
                </div>
                
                <div style="margin-bottom: 15px;">
                    <strong>3. Tiempo Promedio de Espera:</strong><br>
                    ASA = (Pw √ó AHT) / (N - A)<br>
                    ASA = ${calc.avgWait.toFixed(0)} segundos
                </div>
                
                <div style="margin-bottom: 15px;">
                    <strong>4. Nivel de Servicio:</strong><br>
                    SL = 1 - Pw √ó e^(-((N-A) √ó t) / AHT)<br>
                    SL = ${calc.currentServiceLevel.toFixed(1)}% (objetivo: ${calc.targetServiceLevel}%)
                </div>
                
                <div style="margin-bottom: 15px;">
                    <strong>5. Total de Agentes (con Shrinkage):</strong><br>
                    Total = Agentes Base / (1 - Shrinkage%)<br>
                    Total = ${calc.agents} / (1 - ${calc.shrinkage}%) = <span style="color: #3b82f6;">${calc.totalAgents} agentes</span>
                </div>
            `;
            
            document.getElementById('formulaDisplay').innerHTML = formulaHtml;
        }
        
        // Funci√≥n para cambiar tabs
        function showTab(tabName) {
            // Ocultar todos los contenidos
            document.getElementById('resultsTab').style.display = 'none';
            document.getElementById('intervalsTab').style.display = 'none';
            document.getElementById('scenariosTab').classList.remove('active');
            document.getElementById('analysisTab').style.display = 'none';
            
            // Remover clase active de todos los tabs
            document.querySelectorAll('.tab').forEach(tab => tab.classList.remove('active'));
            
            // Mostrar contenido seleccionado y activar tab
            if (tabName === 'results') {
                document.getElementById('resultsTab').style.display = 'block';
                document.querySelectorAll('.tab')[0].classList.add('active');
            } else if (tabName === 'intervals') {
                document.getElementById('intervalsTab').style.display = 'block';
                document.querySelectorAll('.tab')[1].classList.add('active');
            } else if (tabName === 'scenarios') {
                document.getElementById('scenariosTab').classList.add('active');
                document.querySelectorAll('.tab')[2].classList.add('active');
            } else if (tabName === 'analysis') {
                document.getElementById('analysisTab').style.display = 'block';
                document.querySelectorAll('.tab')[3].classList.add('active');
                createCharts();
            }
        }
        
        // Funci√≥n para crear gr√°ficos
        function createCharts() {
            if (!currentCalculation) return;
            
            createSensitivityChart();
            createComparisonChart();
        }
        
        function createSensitivityChart() {
            const canvas = document.getElementById('sensitivityChart');
            const ctx = canvas.getContext('2d');
            const calc = currentCalculation;
            
            // Limpiar canvas
            ctx.clearRect(0, 0, canvas.width, canvas.height);
            
            // Datos para el gr√°fico
            const agentRange = [];
            const serviceLevels = [];
            
            for (let agents = Math.max(1, calc.agents - 10); agents <= calc.agents + 10; agents++) {
                if (agents > calc.trafficIntensity) {
                    agentRange.push(agents);
                    const sl = serviceLevelAchieved(calc.trafficIntensity, agents, calc.aht, calc.targetTime);
                    serviceLevels.push(sl);
                }
            }
            
            if (agentRange.length === 0) return;
            
            // Configuraci√≥n del gr√°fico
            const padding = 40;
            const chartWidth = canvas.width - 2 * padding;
            const chartHeight = canvas.height - 2 * padding;
            
            const maxSL = Math.max(...serviceLevels, calc.targetServiceLevel);
            const minSL = Math.min(...serviceLevels, 0);
            const maxAgents = Math.max(...agentRange);
            const minAgents = Math.min(...agentRange);
            
            // Dibujar ejes
            ctx.beginPath();
            ctx.moveTo(padding, padding);
            ctx.lineTo(padding, padding + chartHeight);
            ctx.lineTo(padding + chartWidth, padding + chartHeight);
            ctx.strokeStyle = '#e2e8f0';
            ctx.lineWidth = 2;
            ctx.stroke();
            
            // Dibujar l√≠nea objetivo
            const targetY = padding + chartHeight - ((calc.targetServiceLevel - minSL) / (maxSL - minSL)) * chartHeight;
            ctx.beginPath();
            ctx.setLineDash([5, 5]);
            ctx.moveTo(padding, targetY);
            ctx.lineTo(padding + chartWidth, targetY);
            ctx.strokeStyle = '#ef4444';
            ctx.lineWidth = 2;
            ctx.stroke();
            ctx.setLineDash([]);
            
            // Dibujar curva
            ctx.beginPath();
            ctx.strokeStyle = '#2575fc';
            ctx.lineWidth = 3;
            
            for (let i = 0; i < agentRange.length; i++) {
                const x = padding + ((agentRange[i] - minAgents) / (maxAgents - minAgents)) * chartWidth;
                const y = padding + chartHeight - ((serviceLevels[i] - minSL) / (maxSL - minSL)) * chartHeight;
                
                if (i === 0) {
                    ctx.moveTo(x, y);
                } else {
                    ctx.lineTo(x, y);
                }
            }
            ctx.stroke();
            
            // Marcar punto actual
            const currentX = padding + ((calc.agents - minAgents) / (maxAgents - minAgents)) * chartWidth;
            const currentY = padding + chartHeight - ((calc.currentServiceLevel - minSL) / (maxSL - minSL)) * chartHeight;
            
            ctx.beginPath();
            ctx.arc(currentX, currentY, 6, 0, 2 * Math.PI);
            ctx.fillStyle = '#16a34a';
            ctx.fill();
            
            // Labels
            ctx.fillStyle = '#64748b';
            ctx.font = '12px Manrope';
            ctx.textAlign = 'center';
            ctx.fillText('N√∫mero de Agentes', padding + chartWidth / 2, canvas.height - 10);
            
            ctx.save();
            ctx.translate(15, padding + chartHeight / 2);
            ctx.rotate(-Math.PI / 2);
            ctx.fillText('Nivel de Servicio (%)', 0, 0);
            ctx.restore();
        }
        
        function createComparisonChart() {
            const canvas = document.getElementById('comparisonChart');
            const ctx = canvas.getContext('2d');
            const calc = currentCalculation;
            
            // Limpiar canvas
            ctx.clearRect(0, 0, canvas.width, canvas.height);
            
            // Comparar diferentes shrinkages
            const shrinkages = [15, 20, 25, 30, 35];
            const agentCounts = shrinkages.map(sh => Math.ceil(calc.agents / (1 - sh / 100)));
            
            // Configuraci√≥n del gr√°fico de barras
            const padding = 40;
            const chartWidth = canvas.width - 2 * padding;
            const chartHeight = canvas.height - 2 * padding;
            
            const maxAgents = Math.max(...agentCounts);
            const barWidth = chartWidth / shrinkages.length * 0.8;
            const barSpacing = chartWidth / shrinkages.length * 0.2;
            
            // Dibujar barras
            shrinkages.forEach((shrinkage, index) => {
                const barHeight = (agentCounts[index] / maxAgents) * chartHeight;
                const x = padding + index * (barWidth + barSpacing) + barSpacing / 2;
                const y = padding + chartHeight - barHeight;
                
                // Gradiente de color
                const gradient = ctx.createLinearGradient(0, y, 0, y + barHeight);
                gradient.addColorStop(0, '#2575fc');
                gradient.addColorStop(1, '#6a11cb');
                
                ctx.fillStyle = gradient;
                ctx.fillRect(x, y, barWidth, barHeight);
                
                // Etiqueta del valor
                ctx.fillStyle = '#1e293b';
                ctx.font = 'bold 12px Manrope';
                ctx.textAlign = 'center';
                ctx.fillText(agentCounts[index], x + barWidth / 2, y - 5);
                
                // Etiqueta del shrinkage
                ctx.fillStyle = '#64748b';
                ctx.font = '11px Manrope';
                ctx.fillText(shrinkage + '%', x + barWidth / 2, padding + chartHeight + 15);
            });
            
            // T√≠tulo y labels
            ctx.fillStyle = '#1e293b';
            ctx.font = 'bold 14px Manrope';
            ctx.textAlign = 'center';
            ctx.fillText('Agentes Totales por % Shrinkage', canvas.width / 2, 25);
            
            ctx.fillStyle = '#64748b';
            ctx.font = '12px Manrope';
            ctx.fillText('Shrinkage (%)', canvas.width / 2, canvas.height - 10);
        }
        
        // Inicializar la aplicaci√≥n
        document.addEventListener('DOMContentLoaded', function() {
            // Configurar valores iniciales de sliders
            document.getElementById('ahtValue').textContent = '5.0 min';
            document.getElementById('serviceLevelValue').textContent = '80%';
            document.getElementById('shrinkageValue').textContent = '25%';
            document.getElementById('occupancyValue').textContent = '85%';
            
            // Realizar c√°lculo inicial
            calculate();
        });
    </script>
</body>
</html>
